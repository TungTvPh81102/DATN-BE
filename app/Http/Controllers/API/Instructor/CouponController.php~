<?php

namespace App\Http\Controllers\API\Instructor;

use App\Http\Controllers\Controller;
use App\Http\Requests\API\Coupons\StoreCouponRequest;
use App\Http\Requests\API\Coupons\UpdateCouponRequest;
use App\Models\Coupon;
use App\Models\CouponUse;
use App\Traits\ApiResponseTrait;
use App\Traits\LoggableTrait;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;

class CouponController extends Controller
{
    use LoggableTrait, ApiResponseTrait;

    public function index()
    {
        try {
            $user = Auth::user();

            if (!$user || !$user->hasRole('instructor')) {
                return $this->respondForbidden('Bạn không có quyền thực hiện chức năng');
            }

            $coupons = Coupon::query()->where('user_id', $user->id)->get();

            if ($coupons->isEmpty()) {
                return $this->respondForbidden('Không có mã giảm giá nào!');
            }

            return $this->respondOk('Danh sách mã giảm giá', $coupons);

        } catch (\Exception $e) {
            $this->logError($e);

            return $this->respondServerError('Có lỗi xảy ra, vui lòng thử lại');
        }
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store(StoreCouponRequest $request)
    {
        try {
            DB::beginTransaction();

            $user = Auth::user();

            if (!$user || !$user->hasRole('instructor')) {
                return $this->respondForbidden('Bạn không có quyền thực hiện chức năng');
            }

            $data = $request->validated();

            $data['user_id'] = $user->id;

            $coupon = Coupon::query()->create($data);

            if (!empty($data['user_ids']) && is_array($data['user_ids'])) {
                foreach ($data['user_ids'] as $user_id) {
                    CouponUse::query()->updateOrCreate(
                        [
                            'user_id' => $user_id,
                            'coupon_id' => $coupon->id
                        ],
                        [
                            'status' => 'unused',
                            'applied_at' => $data['start_date'] ?? null,
                            'expired_at' => $data['expire_date'] ?? null
                        ]
                    );
                }
            }

            DB::commit();

            return $this->respondCreated('Tạo mã giảm giá thành công', $coupon);
        } catch (\Exception $e) {
            DB::rollBack();

            $this->logError($e, $request->all());

            return $this->respondServerError('Có lỗi xảy ra, vui lòng thử lại');
        }
    }

    /**
     * Display the specified resource.
     */
    public function show(string $id)
    {
        try {
            $user = Auth::user();

            if (!$user || !$user->hasRole('instructor')) {
                return $this->respondForbidden('Bạn không có quyền thực hiện chức năng');
            }

            $coupon = Coupon::query()
                ->with([
                    'couponUses.user',
                ])
                ->where('user_id', $user->id)
                ->find($id);

            if (!$coupon) {
                return $this->respondNotFound('Không có má giảm giá nào!');
            }

            return $this->respondOk('Thông tin mã giảm giá', $coupon);
        } catch (\Exception $e) {
            $this->logError($e);

            return $this->respondServerError();
        }
    }

    /**
     * Update the specified resource in storage.
     */
    public function update(UpdateCouponRequest $request, string $id)
    {
        try {
            DB::beginTransaction();

            $user = Auth::user();

            if (!$user || !$user->hasRole('instructor')) {
                return $this->respondForbidden('Bạn không có quyền thực hiện chức năng');
            }

            $coupon = Coupon::query()
                ->where('user_id', $user->id)
                ->find($id);

            $data = $request->validated();

            if (!$coupon) {
                return $this->respondNotFound('Không có mã giảm giá nào!');
            }

            $coupon->update($data);

            if ($data('remove_user_ids')) {
                foreach ($data['remove_user_ids'] as $user_id) {
                    $coupon->user()->detach($user_id);
                }
            }

            DB::commit();

            return $this->respondOk('Thao tác thành công', $coupon);
        } catch (\Exception $e) {
            DB::rollBack();

            $this->logError($e, $request->all());

            return $this->respondServerError('Có lỗi xảy ra, vui lòng thử lại');
        }

    }

    public function toggleStatus(string $id, string $action)
    {
        try {
            $user = Auth::user();

            if (!$user || !$user->hasRole('instructor')) {
                return $this->respondForbidden('Bạn không có quyền thực hiện chức năng');
            }

            $coupon = Coupon::query()
                ->where('user_id', $user->id)
                ->find($id);

            if (!$coupon) {
                return $this->respondForbidden('Không có mã giảm giá nào!');
            }

            $status = $action === 'enable' ? '1' : '0';

            dd($status);
            $coupon->status = $status;
            $coupon->save();

            $message = $action === 'enable' ? 'Kích hoạt thành công' : 'Vô hiệu hóa thành công';
            return $this->respondOk($message);
        } catch (\Exception $e) {
            $this->logError($e);

            return $this->respondServerError('Có lỗi xảy ra, vui lòng thử lại');
        }
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy(string $id)
    {
        try {
            $user = Auth::user();

            if (!$user || !$user->hasRole('instructor')) {
                return $this->respondForbidden('Bạn không có quyền thực hiện chức năng');
            }

            $coupon = Coupon::query()
                ->where('user_id', $user->id)
                ->findOrFail($id);

            if (!$coupon) {
                return $this->respondNotFound('Không có mã giảm giá nào!');
            }

            $coupon->delete();

            return $this->respondOk('Thao tác thành công');
        } catch (\Exception $e) {
            $this->logError($e);

            return $this->respondServerError('Có lỗi xảy ra, vui lòng thử lại');
        }
    }
}
