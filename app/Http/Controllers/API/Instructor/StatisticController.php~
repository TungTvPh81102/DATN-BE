<?php

namespace App\Http\Controllers\API\Instructor;

use App\Http\Controllers\Controller;
use App\Models\Invoice;
use App\Models\Transaction;
use App\Models\User;
use App\Traits\ApiResponseTrait;
use App\Traits\LoggableTrait;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Str;

class StatisticController extends Controller
{
    use LoggableTrait, ApiResponseTrait;

    public function getTotalRevenueWithStudents(Request $request)
    {
        try {
            $user = Auth::user();

            if (!$user || !$user->hasRole('instructor')) {
                return $this->respondUnauthorized('Bạn không có quyền truy cập');
            }

            $selectFilter = $request->input('selectFilter', 'today'); // Default to 'today'

            // Determine the date range based on the selected filter
            $startDate = now()->startOfDay(); // Default start date
            $endDate = now()->endOfDay();     // Default end date

            switch ($selectFilter) {
                case 'yesterday':
                    $startDate = now()->subDay()->startOfDay();
                    $endDate = now()->subDay()->endOfDay();
                    break;

                case 'this_week':
                    $startDate = now()->startOfWeek();
                    $endDate = now()->endOfWeek();
                    break;

                case 'this_month':
                    $startDate = now()->startOfMonth();
                    $endDate = now()->endOfMonth();
                    break;

                case 'this_year':
                    $startDate = now()->startOfYear();
                    $endDate = now()->endOfYear();
                    break;

                case 'today':
                default:
                    // Defaults to today's range
                    $startDate = now()->startOfDay();
                    $endDate = now()->endOfDay();
            }

            // Fetch total revenue
            $totalRevenue = Invoice::query()
                ->select(
                    DB::raw('MONTH(created_at) as month'),
                    DB::raw('SUM(final_amount) as total_revenue')
                )
                ->where('status', 'Đã thanh toán')
                ->whereExists(function ($query) use ($user) {
                    $query->select(DB::raw(1))
                        ->from('courses')
                        ->whereRaw('courses.id = invoices.course_id')
                        ->where('courses.user_id', $user->id);
                })
                ->whereBetween('created_at', [$startDate, $endDate]) // Filter data by date range
                ->groupBy(DB::raw('MONTH(created_at)'))
                ->orderBy('month')
                ->get();

            // Fetch users who bought courses
            $userBuyCourse = Invoice::query()
                ->select('user_id', 'course_id')
                ->where('status', 'Đã thanh toán')
                ->whereExists(function ($query) use ($user) {
                    $query->select(DB::raw(1))
                        ->from('courses')
                        ->whereRaw('courses.id = invoices.course_id')
                        ->where('courses.user_id', $user->id);
                })
                ->with(['user:id,name,avatar', 'course:id,name,slug'])
                ->whereBetween('created_at', [$startDate, $endDate]) // Filter data by date range
                ->get();

            // Fetch top courses
            $topCourse = Invoice::query()
                ->select(
                    'course_id',
                    DB::raw('MONTH(created_at) as month'),
                    DB::raw('COUNT(id) as total_bought_course')
                )
                ->where('status', 'Đã thanh toán')
                ->whereExists(function ($query) use ($user) {
                    $query->select(DB::raw(1))
                        ->from('courses')
                        ->whereRaw('courses.id = invoices.course_id')
                        ->where('courses.user_id', $user->id);
                })
                ->with(['course:id,name,slug'])
                ->whereBetween('created_at', [$startDate, $endDate]) // Filter data by date range
                ->groupBy(DB::raw('MONTH(created_at)'), 'course_id')
                ->orderBy(DB::raw('MONTH(created_at)'))
                ->get();

            $data = [
                'total_revenue' => $totalRevenue,
                'user_buy_course' => $userBuyCourse,
                'topCourse' => $topCourse,
            ];

            return $this->respondOk('Doanh thu và học viên mua khóa học của giảng viên ' . $user->name, $data);
        } catch (\Exception $e) {
            $this->logError($e);
            return $this->respondServerError('Có lỗi xảy ra, vui lòng thử lại');
        }
    }
}
