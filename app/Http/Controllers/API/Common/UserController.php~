<?php

namespace App\Http\Controllers\API\Common;

use App\Http\Controllers\Controller;
use App\Http\Requests\API\User\ChangePasswordRequest;
use App\Http\Requests\API\User\StoreCareerRequest;
use App\Http\Requests\API\User\UpdateCareerRequest;
use App\Http\Requests\API\User\UpdateUserProfileRequest;
use App\Models\Career;
use App\Models\CouponUse;
use App\Models\Course;
use App\Models\CourseUser;
use App\Models\Invoice;
use App\Models\Lesson;
use App\Models\LessonProgress;
use App\Models\Profile;
use App\Models\User;
use App\Models\Video;
use App\Traits\ApiResponseTrait;
use App\Traits\LoggableTrait;
use App\Traits\UploadToCloudinaryTrait;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Hash;

class UserController extends Controller
{
    use LoggableTrait, ApiResponseTrait, UploadToCloudinaryTrait;

    const FOLDER_USER = 'users';
    const FOLDER_CERTIFICATE = 'certificates';

    public function showProfile()
    {
        try {
            $user = Auth::user();

            return $this->respondOk('Thông tin người dùng ' . $user->name, [
                'user' => $user->load('profile.careers'),
            ]);
        } catch (\Exception $e) {
            $this->logError($e);

            return $this->respondServerError('Có lỗi xảy ra, vui lòng thử lại.');
        }
    }

    public function updateProfile(UpdateUserProfileRequest $request)
    {
        try {
            DB::beginTransaction();

            $user = Auth::user();

            if ($request->hasFile('avatar')) {
                if ($user->avatar) {
                    $this->deleteImage($user->avatar, self::FOLDER_USER);
                }

                $avatarUrl = $this->uploadImage($request->file('avatar'), self::FOLDER_USER);
                $user->avatar = $avatarUrl;
            }

            $user->name = $request->name ?? $user->name;
            $user->save();

            $profile = Profile::query()->firstOrCreate(['user_id' => $user->id]);

            if ($profile) {
                if ($request->hasFile('certificates')) {
                    $certificates = json_decode($profile->certificates, true);

                    if (!empty($certificates)) {
                        $this->deleteMultiple($certificates, self::FOLDER_CERTIFICATE);
                    }

                    $uploadedCertificates = $this->uploadCertificates($request->file('certificates'));
                }

                $profile->update([
                    'about_me' => $request->about_me ?? $profile->about_me,
                    'phone' => $request->phone ?? $profile->phone,
                    'address' => $request->address ?? $profile->address,
                    'experience' => $request->experience ?? $profile->experience,
                    'certificates' => !empty($uploadedCertificates)
                        ? json_encode($uploadedCertificates)
                        : $profile->certificates,
                    'bio' => $request->bio ? $this->prepareBioData($request->bio, $profile) : $profile->bio,
                ]);
            }

            DB::commit();

            return $this->respondOk('Cập nhật thông tin thành công', [
                'user' => $user->load('profile.careers'),
            ]);
        } catch (\Exception $e) {
            DB::rollBack();

            $this->logError($e, $request->all());

            return $this->respondServerError('Có lỗi xảy ra, vui lòng thử lại.');
        }
    }

    private function uploadCertificates($certificates)
    {
        if ($certificates) {
            return $this->uploadImageMultiple($certificates, self::FOLDER_CERTIFICATE);
        }
        return [];
    }

    private function prepareBioData($bioData, $profile)
    {
        if ($bioData) {
            $bio = [];
            $profile = !empty($profile->bio) ? json_decode($profile->bio, true) : '';

            if (isset($bioData['facebook'])) {
                $bio['facebook'] = $bioData['facebook'];
            } else {
                if ($profile && !empty($profile['facebook'])) $bio['facebook'] = $profile['facebook'];
            }

            if (isset($bioData['instagram'])) {
                $bio['instagram'] = $bioData['instagram'];
            } else {
                if ($profile && !empty($profile['instagram'])) $bio['instagram'] = $profile['instagram'];
            }

            if (isset($bioData['github'])) {
                $bio['github'] = $bioData['github'];
            } else {
                if ($profile && !empty($profile['github'])) $bio['github'] = $profile['github'];
            }

            if (isset($bioData['linkedin'])) {
                $bio['linkedin'] = $bioData['linkedin'];
            } else {
                if ($profile && !empty($profile['linkedin'])) $bio['linkedin'] = $profile['linkedin'];
            }

            if (isset($bioData['twitter'])) {
                $bio['twitter'] = $bioData['twitter'];
            } else {
                if ($profile && !empty($profile['twitter'])) $bio['twitter'] = $profile['twitter'];
            }

            if (isset($bioData['youtube'])) {
                $bio['youtube'] = $bioData['youtube'];
            } else {
                if ($profile && !empty($profile['youtube'])) $bio['youtube'] = $profile['youtube'];
            }

            if (isset($bioData['website'])) {
                $bio['website'] = $bioData['website'];
            } else {
                if ($profile && !empty($profile['website'])) $bio['website'] = $profile['website'];
            }

            return json_encode($bio);
        }

        return null;
    }


    public function changePassword(ChangePasswordRequest $request)
    {
        try {

            $user = Auth::user();

            $user->password = Hash::make($request->new_password);
            $user->save();

            $user->tokens->each(function ($token) {
                $token->delete();
            });

            return $this->respondOk('Mật khẩu của ' . $user->name . ' đã được thay đổi thành công. Vui lòng đăng nhập lại!');
        } catch (\Exception $e) {
            $this->logError($e, $request->all());

            return $this->respondServerError('Có lỗi xảy ra, vui lòng thử lại.');
        }
    }

    public function getMyCourseBought(Request $request)
    {
        try {
        } catch (\Exception $e) {
            $this->logError($e, $request->all());

            return $this->respondServerError('Có lỗi xảy ra, vui lòng thử lại.');
        }
    }

    public function getUserCourses(Request $request)
    {
        try {
            $user = Auth::user();

            if (!$user) {
                return $this->respondUnauthorized('Bạn chưa đăng nhập');
            }

            $courses = Course::query()
                ->select([
                    'id', 'user_id', 'name', 'slug', 'category_id',
                    'thumbnail', 'level',
                ])
                ->whereHas('courseUsers', function ($query) use ($user) {
                    $query->where('user_id', $user->id);
                })
                ->with([
                    'courseUsers:id,user_id,course_id,progress_percent',
                    'category:id,name,slug',
                    'user:id,name,avatar',
                ])
                ->withCount([
                    'chapters',
                    'lessons'
                ])->get();

            if ($courses->isEmpty()) {
                return $this->respondNotFound('Không có dữ liệu');
            }

            $result = $courses->map(function ($course) {
                $videoLessons = $course->chapters->flatMap(function ($chapter) {
                    return $chapter->lessons->where('lessonable_type', Video::class);
                });

                $totalVideoDuration = $videoLessons->sum(function ($lesson) {
                    return $lesson->lessonable->duration ?? 0;
                });

                $lessonProgress = LessonProgress::query()
                    ->where('user_id', Auth::id())
                    ->whereHas('lesson', function ($query) use ($course) {
                        $lesson = $course->chapters->flatMap(function ($chapter) {
                            return $chapter->lessons;
                        });

                        return $lesson->pluck('id')->toArray();
                    })
                    ->with('lesson:id,title')
                    ->latest('updated_at')
                    ->first();

                if (!$lessonProgress) {
                    $firstLesson = $course->chapters->first()->lessons->first();

                    $currentLesson = $firstLesson ? [
                        'id' => $firstLesson->id,
                        'title' => $firstLesson->title
                    ] : null;
                } else {
                    $currentLesson = [
                        'id' => $lessonProgress->lesson->id,
                        'title' => $lessonProgress->lesson->title,
                    ];
                }

                return [
                    'id' => $course->id,
                    'name' => $course->name,
                    'slug' => $course->slug,
                    'thumbnail' => $course->thumbnail,
                    'level' => $course->level,
                    'chapters_count' => $course->chapters_count,
                    'lessons_count' => $course->lessons_count,
                    'total_video_duration' => $totalVideoDuration,
                    'progress_percent' => $course->courseUsers->first()->progress_percent,
                    'current_lesson' => $currentLesson,
                    'category' => [
                        'id' => $course->category->id ?? null,
                        'name' => $course->category->name ?? null,
                        'slug' => $course->category->slug ?? null
                    ],
                    'user' => [
                        'id' => $course->user->id ?? null,
                        'name' => $course->user->name ?? null,
                        'avatar' => $course->user->avatar ?? null
                    ]
                ];
            });

            return $this->respondOk('Danh sách khoá học của người dùng: ' . $user->name, $result);
        } catch (\Exception $e) {
            $this->logError($e, $request->all());

            return $this->respondServerError('Có lỗi xảy ra, vui lòng thử lại.');
        }
    }

    public function getCourseProgress($slug)
    {
        try {
            $user = Auth::user();

            $course = Course::query()->where('slug', $slug)->first();

            if (!$course) {
                return $this->respondNotFound('Khóa học không tồn tại');
            }

            $courseProgress = CourseUser::where('user_id', $user->id)
                ->where('course_id', $course->id)
                ->select('progress_percent')
                ->first();

            if (!$courseProgress) {
                return $this->respondNotFound('Học viên chưa đăng ký khóa học này');
            }

            return $this->respondOk('Tiến độ khóa học ' .
                $course->name . ' của người dùng: ' .
                $user->name, $courseProgress);
        } catch (\Exception $e) {
            $this->logError($e);

            return $this->respondServerError('Có lỗi xảy ra, vui lòng thử lại.');
        }
    }

    public function getOrdersBought()
    {
        try {
            $user = Auth::user();

            $orders = Invoice::where('user_id', $user->id)
                ->with('course:id,name')
                ->select('id', 'course_id', 'created_at',
                    DB::raw('(amount - IFNULL(coupon_discount, 0)) as final_amount'), 'status')
                ->select(
                    'id',
                    'course_id',
                    'created_at',
                    DB::raw('(amount - IFNULL(coupon_discount, 0)) as final_amount'),
                    'status'
                )
                ->get();

            return $this->respondOk('Danh sách đơn hàng của người dùng: ' . $user->name, $orders);
        } catch (\Exception $e) {
            $this->logError($e);
            return $this->respondServerError('Có lỗi xảy ra, vui lòng thử lại.');
        }
    }

    public function showOrdersBought($id)
    {
        try {
            $user = Auth::user();

            $order = Invoice::where('id', $id)
                ->with([
                    'course' => function ($query) {
                        $query->select('id', 'name', 'user_id')->with('instructor:id,name'); // Đổi instructor_id thành user_id
                    }
                ])
                ->where('user_id', $user->id)
                ->select('id', 'course_id', 'code', 'coupon_code', 'coupon_discount', 'amount', 'created_at',
                    DB::raw('(amount - IFNULL(coupon_discount, 0)) as final_amount'), 'status')
                ->select(
                    'id',
                    'course_id',
                    'code',
                    'coupon_code',
                    'coupon_discount',
                    'amount',
                    'created_at',
                    DB::raw('(amount - IFNULL(coupon_discount, 0)) as final_amount'),
                    'status'
                )
                ->first();

            if (!$order) {
                return $this->respondNotFound('Đơn hàng không tồn tại hoặc không thuộc về người dùng.');
            }
            $courseName = $order->course ? $order->course->name : 'Không xác định';
            return $this->respondOk('Chi tiết đơn hàng ' . $courseName . ' của người dùng: ' . $user->name, $order);
        } catch (\Exception $e) {
            $this->logError($e);
            return $this->respondServerError('Có lỗi xảy ra, vui lòng thử lại.');
        }
    }

    public function storeCareers(StoreCareerRequest $request)
    {
        try {
            if ($request->has('careers')) {
                $user = Auth::user();

                if (!$user) return $this->respondForbidden('Vui lòng đăng nhập và thử lại');

                $profile = Profile::query()->firstOrCreate([
                    'user_id' => $user->id
                ]);

                foreach ($request->careers as $careerData) {
                    Career::create(
                        [
                            'profile_id' => $profile->id,
                            'degree' => $careerData['degree'],
                            'major' => $careerData['major'],
                            'start_date' => $careerData['start_date'],
                            'end_date' => $careerData['end_date'],
                            'description' => $careerData['description'] ?? null,
                            'institution_name' => $careerData['institution_name'],
                        ]
                    );
                }
                return $this->respondCreated('Thêm mới sự nghiệp thành công', ['user' => $user->load('profile.careers')]);
            } else {
                return $this->respondError('Không có dữ liệu để thêm mới');
            }
        } catch (\Exception $e) {
            $this->logError($e, $request->all());

            return $this->respondError('Chưa thể thêm thông tin');
        }
    }

    public function updateCareers(UpdateCareerRequest $request, string $id)
    {
        try {
            if ($request->has('careers') && !empty($request->careers) && is_array($request->careers)) {

                $user = Auth::user();

                if (!$user) return $this->respondForbidden('Vui lòng đăng nhập và thử lại');

                $profile = Profile::query()->firstOrCreate([
                    'user_id' => $user->id
                ]);

                $careerData = $request->careers;

                $career = Career::query()->where('id', $id)->first();

                if ($career) {
                    $career->update(
                        [
                            'profile_id' => $profile->id,
                            'degree' => $careerData[0]['degree'],
                            'major' => $careerData[0]['major'],
                            'start_date' => $careerData[0]['start_date'],
                            'end_date' => $careerData[0]['end_date'],
                            'description' => $careerData[0]['description'] ?? null,
                            'institution_name' => $careerData[0]['institution_name'],
                        ]
                    );
                } else return $this->respondNotFound('Không tìm thấy thông tin');
            }

            return $this->respondOk('Cập nhật thành công', ['user' => $user->load('profile.careers')]);
        } catch (\Exception $e) {
            $this->logError($e, $request->all());

            return $this->respondError('Chưa thể thêm thông tin');
        }
    }

    public function deleteCareers(string $id)
    {
        try {
            $career = Career::destroy($id);

            if (!$career) {
                return $this->respondNotFound('Không tìm thấy thông tin');
            } else {
                return $this->respondNoContent();
            }
        } catch (\Exception $e) {
            $this->logError($e);

            return $this->respondError('Chưa thể thêm thông tin');
        }
    }

    public function getCouponUser()
    {
        try {
            $user = Auth::user();

            if (!$user) {
                return $this->respondForbidden('Bạn không có quyền truy cập');
            }

            $couponUse = CouponUse::query()
                ->with('coupon', function ($query) {
                    $query->select('id', 'code', 'name', 'discount_value');
                })
                ->where('user_id', $user->id)
                ->where('status', 'unused')
                ->select('id', 'user_id', 'coupon_id', 'discount_value', 'applied_at', 'expired_at', 'status')
                ->orderBy('discount_value', 'desc')
                ->get();

            if (!$couponUse) {
                return $this->respondNotFound('Không tìm thấy mã giảm giá');
            }
            return $this->respondOk('Danh sách mã giảm giá của người dùng' . $user->name, $couponUse);
        } catch (\Exception $e) {
            $this->logError($e);

            return $this->respondServerError();
        }
    }
}
