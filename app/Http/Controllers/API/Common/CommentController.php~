<?php

namespace App\Http\Controllers\API\Common;

use App\Http\Controllers\Controller;
use App\Http\Requests\API\Comments\StoreCommentRequest;
use App\Http\Requests\API\Comments\UpdateCommentRequest;
use App\Repositories\CommentRepository;
use App\Models\Comment;
use App\Traits\ApiResponseTrait;
use App\Traits\LoggableTrait;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;

class CommentController extends Controller
{
    use LoggableTrait, ApiResponseTrait;
    protected $commentRepository;

    public function __construct(CommentRepository $commentRepository)
    {
        $this->commentRepository = $commentRepository;
    }

    public function store(StoreCommentRequest $request)
    {
        try {

        } catch (\Exception $e) {
            $this->logError($e);

            return $this->respondServerError();
        }
    }

    public function update(UpdateCommentRequest $request, $id)
    {
        try {
            $comment = Comment::findOrFail($id);
            $this->authorize('update', $comment);

            $updatedComment = $this->commentRepository->update($comment, $request->validated());

            return response()->json([
                'message' => 'Bình luận đã được cập nhật thành công',
                'comment' => $updatedComment
            ]);
        } catch (\Exception $e) {
            $this->logError($e);
            return $this->respondServerError();
        }
    }

    public function destroy($id)
    {
        try {
            $comment = Comment::findOrFail($id);
            $this->authorize('delete', $comment);

            $this->commentRepository->delete($comment);

            return response()->json(['message' => 'Bình luận đã được xóa thành công']);
        } catch (\Exception $e) {
            $this->logError($e);
            return $this->respondServerError();
        }
    }

    public function index($commentableId, $commentableType)
    {
        try {
            $comments = $this->commentRepository->getByCommentable($commentableId, $commentableType);
            if ($comments ->isEmpty()) {
                $this->respondNotFound('Không có dữ liệu');
            }
            return response()->json([
                'comments' => $comments
            ],200);
        } catch (\Exception $e) {
            $this->logError($e);

            return $this->respondServerError('Có lỗi xảy ra, vui lòng thử lại');
        }
    }
}
